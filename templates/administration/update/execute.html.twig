{% extends 'small.html.twig' %}

{% trans_default_domain 'mosparo' %}

{% block documentTitle %}{{ 'administration.update.execute.title'|trans }} - {{ parent() }}{% endblock %}

{% block small_body %}
    <h2 class="card-title text-center mb-4">{{ 'administration.update.execute.title'|trans }}</h2>

    <div class="alert alert-info update-alert alert-in-progress" role="alert">
        <div class="d-flex align-items-center">
            <div>
                <i class="update-loader"></i>
            </div>
            <div>
                {{ 'administration.update.execute.description'|trans }}
            </div>
        </div>
    </div>
    <div class="alert alert-success update-alert alert-update-completed d-none" role="alert">
        <div class="d-flex align-items-center">
            <div>
                <i class="ti ti-check icon alert-icon"></i>
            </div>
            <div>
                {{ 'administration.update.execute.message.successfullyUpdated'|trans }}
            </div>
        </div>
    </div>
    <div class="alert alert-danger update-alert alert-update-error d-none" role="alert">
        <div class="d-flex align-items-center">
            <div>
                <i class="ti ti-x icon alert-icon"></i>
            </div>
            <div>
                {{ 'administration.update.execute.message.updateError'|trans }}
            </div>
        </div>
    </div>

    <p>
        {{ 'administration.update.execute.description'|trans }}
    </p>

    <div class="row mb-3">
        <div class="col-6">
            <h4 class="mb-0">
                {{ 'administration.update.installedVersion'|trans }}
            </h4>
            <div>
                {{ mosparoVersion }}
            </div>
        </div>
        <div class="col-6">
            <h4 class="mb-0">
                {{ 'administration.update.availableVersion'|trans }}
            </h4>
            <div>
                {{ availableUpdateData.version }}
            </div>
        </div>
    </div>

    <h4>{{ 'administration.update.execute.log'|trans }}</h4>
    <div class="update-log">
        <ul class="update-log-list">
        </ul>
    </div>

    <div class="form-footer d-none">
        <a href="{{ path('administration_update_finalize') }}" class="btn btn-primary w-100">
            {{ 'setup.buttons.continue'|trans }}
            <i class="ti ti-icon-right ti-chevron-right"></i>
        </a>
    </div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}

    <script type="text/javascript">
        var lastResponseText = '';

        function extractNewMessage(responseText)
        {
            let newData = responseText.substring(lastResponseText.length).trim();

            lastResponseText = responseText;

            return newData.split("\n");
        }

        function markRunningAsCompleted(type)
        {
            let runningEl = $('.update-log-list .running');
            let iconEl = runningEl.find('.update-loader');

            runningEl.removeClass('running');
            iconEl.removeClass('update-loader');

            if (type === 'completed') {
                runningEl.addClass('completed');
                iconEl.addClass('ti ti-check');
            } else if (type === 'error') {
                runningEl.addClass('error');
                iconEl.addClass('ti ti-x');
            }
        }

        /**
         * alert-in-progress" role="alert">
         <div class="d-flex align-items-center">
         <div>
         <i class="update-loader"></i>
         </div>
         <div>
         {{ 'administration.update.execute.description'|trans }}
         </div>
         </div>
         </div>
         <div class="alert alert-success update-alert alert-update-completed d-none" role="alert">
         <div class="d-flex align-items-center">
         <div>
         <i class="ti ti-check icon alert-icon"></i>
         </div>
         <div>
         {{ 'administration.update.execute.message.successfullyUpdated'|trans }}
         </div>
         </div>
         </div>
         <div class="alert alert-danger update-alert alert-update-error
         * @param message
         */

        function processMessage(message)
        {
            message = JSON.parse(message);

            if (message.inProgress) {
                markRunningAsCompleted('completed');
                let statusItem = $('<li></li>').addClass('running');

                $('<i></i>').addClass('update-loader').appendTo(statusItem);
                $('<div></div>').text(message.message).appendTo(statusItem);

                $('.update-log-list').append(statusItem);
            } else {
                if (message.error) {
                    markRunningAsCompleted('error');

                    let statusItem = $('<li></li>').addClass('error').text(message.message);
                    $('.update-log-list').append(statusItem);

                    $('.alert-in-progress').addClass('d-none');
                    $('.alert-update-error').removeClass('d-none');
                } else {
                    markRunningAsCompleted('completed');
                    $('.form-footer').removeClass('d-none');

                    $('.alert-in-progress').addClass('d-none');
                    $('.alert-update-completed').removeClass('d-none');
                }
            }
        }

        $.ajax({
            url: '{{ path('administration_update_execute_update') }}',
            cache: false,
            contentType: false,
            processData: false,
            type: 'GET',
            dataType: "text",
            beforeSend: function(jqXHR, settings) {
                let that = this;
                let xhr = settings.xhr;
                settings.xhr = function() {
                    var output = xhr();
                    output.onreadystatechange = function() {
                        if (typeof(that.readyStateChanged) == "function") {
                            that.readyStateChanged(this);
                        }
                    };
                    return output;
                };
            },
            readyStateChanged: function(jqXHR) {
                if (jqXHR.readyState == 3) {
                    let newMessages = extractNewMessage(jqXHR.responseText);

                    for (let index in newMessages) {
                        processMessage(newMessages[index]);
                    }
                }
            }
        });
    </script>
{% endblock %}
